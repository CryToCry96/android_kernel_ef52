diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 6f2f2dd..887a6e7 100755
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -486,4 +486,10 @@ config TOUCH_WAKE
        help
          Say Y here to enable touch wake
 
+config BLX
+       bool "Support for Battery Life eXtender"
+       default y
+       help
+         Say Y here to enable Battery Life eXtender
+
 endif # MISC_DEVICES
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index d6dff9f..6ebf049 100755
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -47,3 +47,4 @@ obj-$(CONFIG_GENERIC_BLN) += bln.o
 obj-$(CONFIG_BLD) += bld.o
 obj-$(CONFIG_SCREEN_DIMMER) += screen_dimmer.o
 obj-$(CONFIG_TOUCH_WAKE) += touch_wake.o
+obj-$(CONFIG_BLX) += blx.o
diff --git a/drivers/misc/blx.c b/drivers/misc/blx.c
new file mode 100644
index 0000000..636a128
--- /dev/null
+++ b/drivers/misc/blx.c
@@ -0,0 +1,107 @@
+/* drivers/misc/blx.c
+ *
+ * Copyright 2011  Ezekeel
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/miscdevice.h>
+#include <linux/blx.h>
+
+#define BATTERYLIFEEXTENDER_VERSION 1
+
+static int charging_limit;
+
+static ssize_t blx_charginglimit_read(struct device * dev, struct device_attribute * attr, char * buf)
+{
+    return sprintf(buf, "%u\n", charging_limit);
+}
+
+static ssize_t blx_charginglimit_write(struct device * dev, struct device_attribute * attr, const char * buf, size_t size)
+{
+    unsigned int data;
+
+    if(sscanf(buf, "%u\n", &data) == 1) 
+	{
+	    if (data >= 0 && data <= 101)
+		{
+		    charging_limit = data;
+		    
+		    pr_info("BLX charging limit set to %u\n", charging_limit);
+		}
+	    else
+		{
+		    pr_info("%s: invalid input range %u\n", __FUNCTION__, data);
+		}
+	} 
+    else 
+	{
+	    pr_info("%s: invalid input\n", __FUNCTION__);
+	}
+
+    return size;
+}
+
+static ssize_t blx_version(struct device * dev, struct device_attribute * attr, char * buf)
+{
+    return sprintf(buf, "%u\n", BATTERYLIFEEXTENDER_VERSION);
+}
+
+static DEVICE_ATTR(charging_limit, S_IRUGO | S_IWUGO, blx_charginglimit_read, blx_charginglimit_write);
+static DEVICE_ATTR(version, S_IRUGO , blx_version, NULL);
+
+static struct attribute *blx_attributes[] = 
+    {
+	&dev_attr_charging_limit.attr,
+	&dev_attr_version.attr,
+	NULL
+    };
+
+static struct attribute_group blx_group = 
+    {
+	.attrs  = blx_attributes,
+    };
+
+static struct miscdevice blx_device = 
+    {
+	.minor = MISC_DYNAMIC_MINOR,
+	.name = "batterylifeextender",
+    };
+
+int get_charginglimit(void)
+{
+    return charging_limit;
+}
+EXPORT_SYMBOL(get_charginglimit);
+
+static int __init blx_init(void)
+{
+    int ret;
+
+    pr_info("%s misc_register(%s)\n", __FUNCTION__, blx_device.name);
+
+    ret = misc_register(&blx_device);
+
+    if (ret) 
+	{
+	    pr_err("%s misc_register(%s) fail\n", __FUNCTION__, blx_device.name);
+
+	    return 1;
+	}
+
+    if (sysfs_create_group(&blx_device.this_device->kobj, &blx_group) < 0) 
+	{
+	    pr_err("%s sysfs_create_group fail\n", __FUNCTION__);
+	    pr_err("Failed to create sysfs group for device (%s)!\n", blx_device.name);
+	}
+
+    charging_limit = 101;
+
+    return 0;
+}
+
+device_initcall(blx_init);
diff --git a/drivers/power/s5pc110_battery.c b/drivers/power/s5pc110_battery.c
index 198a0e6..89583a0 100755
--- a/drivers/power/s5pc110_battery.c
+++ b/drivers/power/s5pc110_battery.c
@@ -47,6 +47,10 @@
 #include "s5pc110_battery.h"
 #include <linux/mfd/max8998.h>
 
+#ifdef CONFIG_BLX
+#include <linux/blx.h>
+#endif
+
 #define POLLING_INTERVAL	1000
 #define ADC_TOTAL_COUNT		10
 #define ADC_DATA_ARR_SIZE	6
@@ -410,6 +414,13 @@ static void s3c_bat_discharge_reason(struct chg_data *chg)
 	if (chg->set_batt_full)
 		chg->bat_info.dis_reason |= DISCONNECT_BAT_FULL;
 
+#ifdef CONFIG_BLX
+	if (chg->bat_info.batt_soc >= get_charginglimit())
+	    {
+		chg->bat_info.dis_reason |= DISCONNECT_BAT_FULL;
+	    }
+#endif
+
 	if (chg->bat_info.batt_health != POWER_SUPPLY_HEALTH_GOOD)
 		chg->bat_info.dis_reason |= chg->bat_info.batt_health ==
 			POWER_SUPPLY_HEALTH_OVERHEAT ?
diff --git a/include/linux/blx.h b/include/linux/blx.h
new file mode 100644
index 0000000..640f852
--- /dev/null
+++ b/include/linux/blx.h
@@ -0,0 +1,8 @@
+/* include/linux/blx.h */
+
+#ifndef _LINUX_BLX_H
+#define _LINUX_BLX_H
+
+int get_charginglimit(void);
+
+#endif
